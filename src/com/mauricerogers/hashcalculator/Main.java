/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Main.java
 *
 * Created on Mar 1, 2009, 8:46:36 PM
 */
package com.mauricerogers.hashcalculator;

import javax.swing.JFileChooser;
import javax.swing.UIManager;
import com.twmacinta.util.MD5;
import javax.swing.JOptionPane;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.digests.SHA1Digest;
import org.bouncycastle.crypto.digests.SHA256Digest;

/**
 *
 * @author mrogers
 */
public class Main extends javax.swing.JFrame
{

    JFileChooser fc;
    File selectedFile = null;

    /** Creates new form Main */
    public Main()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSelectedFile = new javax.swing.JLabel();
        txtSelectedFile = new javax.swing.JTextField();
        cmbSelectFile = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtOutput = new javax.swing.JTextArea();
        lblOutput = new javax.swing.JLabel();
        cmdClose = new javax.swing.JButton();
        cmdCalculateHash = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblTitle.setText("Hash Calculator 1.1");

        lblSelectedFile.setText("Select File:");

        txtSelectedFile.setEditable(false);

        cmbSelectFile.setText("Browse");
        cmbSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSelectFileActionPerformed(evt);
            }
        });

        txtOutput.setColumns(20);
        txtOutput.setRows(5);
        jScrollPane1.setViewportView(txtOutput);

        lblOutput.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        lblOutput.setText("Output");

        cmdClose.setText("Close");
        cmdClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCloseActionPerformed(evt);
            }
        });

        cmdCalculateHash.setText("Calculate Hash");
        cmdCalculateHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdCalculateHashActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(lblSelectedFile)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtSelectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cmbSelectFile))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(cmdCalculateHash)
                            .addGap(18, 18, 18)
                            .addComponent(cmdClose)))
                    .addComponent(lblOutput))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectedFile)
                    .addComponent(txtSelectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSelectFile))
                .addGap(40, 40, 40)
                .addComponent(lblOutput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdClose)
                    .addComponent(cmdCalculateHash))
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(497, 397));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbSelectFileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmbSelectFileActionPerformed
    {//GEN-HEADEREND:event_cmbSelectFileActionPerformed
        //Create a file chooser
        fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        int returnVal = fc.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION)
          {
            selectedFile = fc.getSelectedFile();
            txtSelectedFile.setText(selectedFile.getAbsolutePath());
          }
        else
          {
          }
}//GEN-LAST:event_cmbSelectFileActionPerformed

    private void cmdCloseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmdCloseActionPerformed
    {//GEN-HEADEREND:event_cmdCloseActionPerformed
        this.dispose();
        System.exit(0);
    }//GEN-LAST:event_cmdCloseActionPerformed

    private void cmdCalculateHashActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cmdCalculateHashActionPerformed
    {//GEN-HEADEREND:event_cmdCalculateHashActionPerformed

        if (selectedFile == null)
          {
            JOptionPane.showMessageDialog(null, "There was no file selected.", "Error", JOptionPane.ERROR_MESSAGE);
          }
        else
          {
            getMD5Hash(selectedFile);
            getSHA1Hash(selectedFile);
            getSHA256Hash(selectedFile);
          }



    }//GEN-LAST:event_cmdCalculateHashActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        try
          {
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());

          }
        catch (Exception ex)
          {
            ex.printStackTrace();
          }

        java.awt.EventQueue.invokeLater(new Runnable()
        {

            public void run()
            {
                new Main().setVisible(true);
            }
        });
    }

    private void getMD5Hash(File selectedFile)
    {
        String hash = null;
        try
          {
            hash = MD5.asHex(MD5.getHash(selectedFile));

            String message1 = "Now calculating the MD5 hash for the specified file.";
            String message2 = "\nThe MD5 hash is: ";

            txtOutput.setText("");
            txtOutput.append(message1);
            txtOutput.append(message2);
            txtOutput.append(hash);

            txtOutput.append("\n\n");
          }
        catch (Exception ex)
          {

            ex.printStackTrace();
          }

    }

    private void getSHA1Hash(File selectedFile)
    {

        String message1 = "Now calculating the SHA1 hash for the specified file.";
        String message2 = "\nThe SHA1 hash is: ";


        txtOutput.append(message1);

        Digest hasher = new SHA1Digest();


        try
          {
            byte[] hash = null;
            InputStream inputFile = new FileInputStream(selectedFile);
            BufferedInputStream bufferedFile = new BufferedInputStream(inputFile);
            byte[] bytes = new byte[8192];
            int read = 0;

            /** public void update(byte[] in, int inOff, int len)
             *   update the message digest with a block of bytes.
             *   Parameters:
             *   in - the byte array containing the data.
             *   inOff - the offset into the byte array where the data starts.
             *   len - the length of the data.
             */
            /** public int doFinal(byte[] out, int outOff)
             *   close the digest, producing the final digest value. The doFinal call leaves the digest reset.
             *   Parameters:
             *   out - the array the digest is to be copied into.
             *   outOff - the offset into the out array the digest is to start at.
             */
            hasher.reset();
            try
              {
                // Read in the bytes
                while ((read = bufferedFile.read(bytes)) > -1)
                  {
                    hasher.update(bytes, 0, read);
                  }
              }
            finally
              {
                if (bufferedFile != null)
                  {
                    bufferedFile.close();
                  }
                if (inputFile != null)
                  {
                    inputFile.close();
                  }
              }
            hash = new byte[hasher.getDigestSize()];
            hasher.doFinal(hash, 0);

            txtOutput.append(message2);
            txtOutput.append(toHexString(hash));

            txtOutput.append("\n\n");

          }
        catch (Exception e)
          {
          }


    }

    private void getSHA256Hash(File selectedFile)
    {

        String message1 = "Now calculating the SHA256 hash for the specified file.";
        String message2 = "\nThe SHA256 hash is: ";


        txtOutput.append(message1);

        Digest hasher = new SHA256Digest();


        try
          {
            byte[] hash = null;
            InputStream inputFile = new FileInputStream(selectedFile);
            BufferedInputStream bufferedFile = new BufferedInputStream(inputFile);
            byte[] bytes = new byte[8192];
            int read = 0;

            /** public void update(byte[] in, int inOff, int len)
             *   update the message digest with a block of bytes.
             *   Parameters:
             *   in - the byte array containing the data.
             *   inOff - the offset into the byte array where the data starts.
             *   len - the length of the data.
             */
            /** public int doFinal(byte[] out, int outOff)
             *   close the digest, producing the final digest value. The doFinal call leaves the digest reset.
             *   Parameters:
             *   out - the array the digest is to be copied into.
             *   outOff - the offset into the out array the digest is to start at.
             */
            hasher.reset();
            try
              {
                // Read in the bytes
                while ((read = bufferedFile.read(bytes)) > -1)
                  {
                    hasher.update(bytes, 0, read);
                  }
              }
            finally
              {
                if (bufferedFile != null)
                  {
                    bufferedFile.close();
                  }
                if (inputFile != null)
                  {
                    inputFile.close();
                  }
              }
            hash = new byte[hasher.getDigestSize()];
            hasher.doFinal(hash, 0);

            txtOutput.append(message2);
            txtOutput.append(toHexString(hash));

            txtOutput.append("\n\n");

          }
        catch (Exception e)
          {
          }


    }
    //Table to convert a nibble to a hex char.
    static char[] hexChar =
      {
        '0', '1', '2', '3',
        '4', '5', '6', '7',
        '8', '9', 'a', 'b',
        'c', 'd', 'e', 'f'
      };

    private static String toHexString(byte[] b)
    {
        StringBuffer sb = new StringBuffer(b.length * 2);
        for (int i = 0; i < b.length; i++)
          {
            // look up high nibble char
            sb.append(hexChar[(b[i] & 0xf0) >>> 4]);

            // look up low nibble char
            sb.append(hexChar[b[i] & 0x0f]);
          }
        return sb.toString();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cmbSelectFile;
    private javax.swing.JButton cmdCalculateHash;
    private javax.swing.JButton cmdClose;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblOutput;
    private javax.swing.JLabel lblSelectedFile;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextArea txtOutput;
    private javax.swing.JTextField txtSelectedFile;
    // End of variables declaration//GEN-END:variables
}
